id 
AKfycbzJQIkpDwf6gU94PAWUvQEf8IPc_JcLkn6yKyvIpIMPKht1TRgJ4JbjTwk0pylCcFo
webb scripts 
https://script.google.com/macros/s/AKfycbzJQIkpDwf6gU94PAWUvQEf8IPc_JcLkn6yKyvIpIMPKht1TRgJ4JbjTwk0pylCcFo/exec



- tambah 
dibuat oleh husein arafat @copyright 2025 
input dokumen/gambar
burger menu, jika di scroll ke bawah, maka ikut ke bawah 

// KONFIGURASI
var SPREADSHEET_ID = "ID_SPREADSHEET_ANDA_DI_SINI"; 
var SHEET_NAME = "NamaSheetAnda";
var NOTIFICATION_EMAIL = "email.penerima.notifikasi@gmail.com";

// Fungsi ini dipanggil saat halaman daftar tamu meminta data
function doGet(e) {
  try {
    if (e.parameter.action !== 'read') {
      return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: 'Invalid action.' })).setMimeType(ContentService.MimeType.JSON);
    }

    var sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
    if (!sheet) {
      return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: 'Sheet not found.' })).setMimeType(ContentService.MimeType.JSON);
    }

    var targetDate;
    if (e.parameter.date && e.parameter.date !== "") {
      targetDate = new Date(e.parameter.date + 'T00:00:00'); 
    } else {
      targetDate = new Date();
    }
    targetDate.setHours(0, 0, 0, 0);

    var data = sheet.getDataRange().getValues();
    data.shift(); // Hapus baris header

    var guestsForDate = data.filter(function(row) {
      var rowDate = new Date(row[0]);
      rowDate.setHours(0, 0, 0, 0);
      return rowDate.getTime() === targetDate.getTime();
    }).map(function(row, index) {
      var timestamp = new Date(row[0]);
      return {
        rowNumber: index + 2,
        waktu: timestamp.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit', timeZone: 'Asia/Jakarta' }),
        nama: row[1],
        jabatan: row[2],    // <-- Perubahan: Membaca data Jabatan
        instansi: row[3],
        tujuan: row[4],
        nomor: row[5]
      };
    });

    return ContentService.createTextOutput(JSON.stringify({ status: 'success', data: guestsForDate.reverse() })).setMimeType(ContentService.MimeType.JSON);

  } catch (err) {
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: err.toString() })).setMimeType(ContentService.MimeType.JSON);
  }
}

// Fungsi ini sekarang menangani Create, Update, dan Delete
function doPost(e) {
  try {
    var sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
    var action = e.parameter.action;

    if (action === 'delete') {
      var rowNumber = parseInt(e.parameter.rowNumber, 10);
      sheet.deleteRow(rowNumber);
      return ContentService.createTextOutput(JSON.stringify({ status: 'success', message: 'Data berhasil dihapus.' })).setMimeType(ContentService.MimeType.JSON);
    
    } else if (action === 'update') {
      var rowNumber = parseInt(e.parameter.rowNumber, 10);
      // Kolom di Sheet: A=1, B=2, C=3, dst.
      sheet.getRange(rowNumber, 2).setValue(e.parameter.nama);
      sheet.getRange(rowNumber, 3).setValue(e.parameter.jabatan);  // <-- Perubahan: Mengedit data Jabatan
      sheet.getRange(rowNumber, 4).setValue(e.parameter.instansi);
      sheet.getRange(rowNumber, 5).setValue(e.parameter.tujuan);
      sheet.getRange(rowNumber, 6).setValue(e.parameter.nomor);
      return ContentService.createTextOutput(JSON.stringify({ status: 'success', message: 'Data berhasil diperbarui.' })).setMimeType(ContentService.MimeType.JSON);

    } else { // Aksi default adalah 'create' (menambah data baru)
      var data = e.parameter;
      if (!data.nama || data.nama.trim() === "" || !data.instansi || data.instansi.trim() === "" || !data.tujuan || data.tujuan.trim() === "") {
        return ContentService.createTextOutput(JSON.stringify({ status: "error", message: "Data tidak lengkap." })).setMimeType(ContentService.MimeType.JSON);
      }
      
      var timestamp = new Date();
      // <-- Perubahan: Menambah data Jabatan saat membuat baris baru
      sheet.appendRow([timestamp, data.nama, data.jabatan, data.instansi, data.tujuan, data.nomor]);
      
      return ContentService.createTextOutput(JSON.stringify({ status: 'success', message: 'Data berhasil dikirim.' })).setMimeType(ContentService.MimeType.JSON);
    }

  } catch (err) {
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: err.toString() })).setMimeType(ContentService.MimeType.JSON);
  }
}
